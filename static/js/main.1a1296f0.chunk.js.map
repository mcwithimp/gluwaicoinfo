{"version":3,"sources":["InvestorsTable.js","App.js","serviceWorker.js","index.js"],"names":["numFormatter","cell","parts","parseFloat","toString","split","length","toFixed","replace","formatted","join","react_default","a","createElement","columns","dataField","text","align","filter","textFilter","headerClasses","classes","formatter","sort","hidden","vestingPeriod","183","365","730","1095","expandRow","renderer","row","style","textAlign","investment","map","inv","amount","showExpandColumn","expandByColumnOnly","expandHeaderColumnRenderer","_ref","isAnyExpands","expandColumnRenderer","_ref2","expanded","CaptionElement","borderRadius","color","border","padding","InvestorsTable","lib_default","keyField","bootstrap4","caption","InvestorsTable_CaptionElement","data","this","props","filterFactory","striped","bordered","hover","condensed","Component","require","App","className","src_InvestorsTable_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ihiUAOMA,qBAAe,SAACC,GACpB,IAAIC,EAAQC,WAAWF,GAAMG,WAAWC,MAAM,KAC1B,GAAhBH,EAAMI,SAAaJ,EAAQC,WAAWF,GAAMM,QAAQ,GAAGF,MAAM,MACjEH,EAAM,GAAKA,EAAM,GAAGM,QAAQ,oBAAoB,OAChD,IAAMC,EAAYP,EAAMQ,KAAK,KAC7B,OACEC,EAAAC,EAAAC,cAAA,YAAOJ,KAILK,EAAU,CACd,CACEC,UAAW,UACXC,KAAM,UACNC,MAAO,OACPC,OAAQC,uBACRC,cAAe,iBACfC,QAAS,kBAEX,CACEN,UAAW,uBACXC,KAAM,eACNI,cAAe,gBAEjB,CACEL,UAAW,gBACXC,KAAM,cACNM,UAAWtB,EACXuB,MAAM,EACNH,cAAe,iBAEjB,CACEL,UAAW,qBACXC,KAAM,aACNI,cAAe,gBAEjB,CACEL,UAAW,QACXC,KAAM,QACNM,UAAWtB,EACXuB,MAAM,EACNH,cAAe,iBAGjB,CACEL,UAAW,uBACXC,KAAM,WACNM,UAAWtB,EACXoB,cAAe,gBACfI,QAAQ,GAEV,CACET,UAAW,uBACXC,KAAM,UACNM,UAAWtB,EACXoB,cAAe,gBACfI,QAAQ,GAEV,CACET,UAAW,uBACXC,KAAM,UACNM,UAAWtB,EACXoB,cAAe,gBACfI,QAAQ,GAEV,CACET,UAAW,wBACXC,KAAM,UACNM,UAAWtB,EACXoB,cAAe,gBACfI,QAAQ,IAINC,EAAgB,CACpBC,IAAO,WACPC,IAAO,SACPC,IAAO,UACPC,KAAQ,WAGJC,EAAY,CAChBC,SAAU,SAAAC,GACR,OACErB,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAACC,UAAW,SACtBvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BAEDmB,EAAIG,WAAWC,IAAI,SAAAC,GAClB,OACE1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YAAOY,EAAcY,EAAIZ,eAAzB,MACCzB,EAAaqC,EAAIC,aAO9BC,kBAAkB,EAClBC,oBAAoB,EACpBC,2BAA4B,SAAAC,GAAA,OAAAA,EAAGC,aAAkChC,EAAAC,EAAAC,cAAA,cAAWF,EAAAC,EAAAC,cAAA,eAC5E+B,qBAAsB,SAAAC,GAAA,OAAAA,EAAGC,SAA0BnC,EAAAC,EAAAC,cAAA,cAAWF,EAAAC,EAAAC,cAAA,kBAG1DkC,EAAiB,kBAAMpC,EAAAC,EAAAC,cAAA,MAAIoB,MAAO,CAAEe,aAAc,SAAUd,UAAW,SAAUe,MAAO,SAAUC,OAAQ,mBAAoBC,QAAS,UAAhH,wBAsBdC,mLAlBX,OACEzC,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,CACE0C,SAAS,KACTC,YAAY,EACZC,QAAS7C,EAAAC,EAAAC,cAAC4C,EAAD,MACTC,KAAOC,KAAKC,MAAMF,KAClB5C,QAAUA,EACVI,OAAS2C,MACT/B,UAAYA,EACZgC,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLC,WAAS,WAdYC,aC/GvBR,EAAOS,EAAQ,IAUNC,MARf,WACE,OACEzD,EAAAC,EAAAC,cAAA,OAAKwD,UAAU,OACb1D,EAAAC,EAAAC,cAACyD,EAAD,CAAgBZ,KAAMA,MCIRa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a1296f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport 'react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport './InvestorsTable.css';\n\nconst numFormatter = (cell) => {\n  let parts = parseFloat(cell).toString().split('.');\n  if (parts.length == 2) parts = parseFloat(cell).toFixed(3).split('.')\n  parts[0] = parts[0].replace(/(.)(?=(\\d{3})+$)/g,'$1,');\n  const formatted = parts.join('.');\n  return (\n    <span>{formatted}</span>\n  )\n}\n\nconst columns = [\n  {\n    dataField: 'address',\n    text: 'Address',\n    align: 'left',\n    filter: textFilter(),\n    headerClasses: 'address-header',\n    classes: 'address-column'\n  },\n  {\n    dataField: 'rank.byVestingPerDay',\n    text: 'Rank/Vesting',\n    headerClasses: 'rank-headers'\n  },\n  {\n    dataField: 'vestingPerDay',\n    text: 'Vesting/Day',\n    formatter: numFormatter,\n    sort: true,\n    headerClasses: 'token-headers'\n  },\n  {\n    dataField: 'rank.byTotalAmount',\n    text: 'Rank/Total',\n    headerClasses: 'rank-headers'\n  },\n  {\n    dataField: 'total',\n    text: 'Total',\n    formatter: numFormatter,\n    sort: true,\n    headerClasses: 'token-headers'\n  },\n\n  {\n    dataField: 'investmentUnfold.183',\n    text: '6 Months',\n    formatter: numFormatter,\n    headerClasses: 'token-headers',\n    hidden: true\n  },\n  {\n    dataField: 'investmentUnfold.365',\n    text: '1 Years',\n    formatter: numFormatter,\n    headerClasses: 'token-headers',\n    hidden: true\n  },\n  {\n    dataField: 'investmentUnfold.730',\n    text: '2 Years',\n    formatter: numFormatter,\n    headerClasses: 'token-headers',\n    hidden: true\n  },\n  {\n    dataField: 'investmentUnfold.1095',\n    text: '3 Years',\n    formatter: numFormatter,\n    headerClasses: 'token-headers',\n    hidden: true\n  }\n];\n\nconst vestingPeriod = {\n  '183': '6 Months',\n  '365': '1 Year',\n  '730': '2 Years',\n  '1095': '3 Years',\n}\n\nconst expandRow = {\n  renderer: row => {\n    return (\n      <div style={{textAlign: 'left'}}>\n        <div>\n          <span>Vesting Detail</span>\n        </div>\n        {row.investment.map(inv => {\n          return (\n            <div>\n              <span>{vestingPeriod[inv.vestingPeriod]}: </span>\n              {numFormatter(inv.amount)}\n            </div>\n          )\n        })}\n      </div>\n    )\n  },\n  showExpandColumn: true,\n  expandByColumnOnly: true,\n  expandHeaderColumnRenderer: ({ isAnyExpands }) => isAnyExpands ? <b>-</b> : <b>+</b>,\n  expandColumnRenderer: ({ expanded }) => expanded ? <b>-</b> : <b>...</b>\n};\n\nconst CaptionElement = () => <h3 style={{ borderRadius: '0.25em', textAlign: 'center', color: 'purple', border: '1px solid purple', padding: '0.5em' }}>Component as Header</h3>;\n\nclass InvestorsTable extends Component {\n  render() {\n    return (\n      <BootstrapTable\n        keyField='id'\n        bootstrap4={true}\n        caption={<CaptionElement />}\n        data={ this.props.data }\n        columns={ columns }\n        filter={ filterFactory() }\n        expandRow={ expandRow }\n        striped\n        bordered\n        hover\n        condensed\n      />\n    )\n  }\n}\n\nexport default InvestorsTable;\n// class InvestorsTable extends Component {\n//   render() {\n//     const data = require('./salesInfo.json');\n//\n//     const columns = [\n//       {\n//         Header: 'Address',\n//         accessor: 'address', // String-based value accessors!\n//         minWidth: 210\n//       },\n//       {\n//         id: 'vestingPerDay',\n//         Header: 'Vesting/Day',\n//         accessor: d => parseFloat(parseFloat(d.vestingPerDay).toFixed(2)), // Custom value accessors!\n//         minWidth: 60\n//       },\n//       {\n//         Header: 'Vesting',\n//         accessor: 'vesting-group',\n//         columns: [{\n//             Header: 'Total',\n//             accessor: 'total',\n//             minWidth: 60\n//           },{\n//             id: '6Mvesting',\n//             Header: \"6 Months\", // Custom header components!\n//             accessor: d => d.investmentUnfold['183'],\n//             minWidth: 60\n//           },{\n//             id: '1Yvesting',\n//             Header: \"1 year\", // Custom header components!\n//             accessor: d => d.investmentUnfold['365'],\n//             minWidth: 60\n//           },{\n//             id: '2Yvesting',\n//             Header: \"2 years\", // Custom header components!\n//             accessor: d => d.investmentUnfold['730'],\n//             minWidth: 60\n//           },{\n//             id: '3Yvesting',\n//             Header: \"3 years\", // Custom header components!\n//             accessor: d => d.investmentUnfold['1095'],\n//             minWidth: 60\n//           }\n//         ]\n//       },\n//     ]\n//\n//     return <ReactTable\n//       data={data}\n//       columns={columns}\n//     />\n//   }\n// }\n//\n// export default InvestorsTable;\n","import React from 'react';\nimport InvestorsTable from './InvestorsTable';\n\nconst data = require('./salesInfo.json');\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <InvestorsTable data={data}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}