{"version":3,"sources":["InvestorsTable.js","Charts.js","App.js","serviceWorker.js","index.js","utils.js"],"names":["require","vestingPeriodToWord","numRounderByTwo","createNumRounder","numFormatter","cell","react_default","a","createElement","columns","dataField","text","align","filter","textFilter","headerClasses","classes","formatter","sort","hidden","expandRow","renderer","row","className","investment","map","inv","vestingPeriod","amount","showExpandColumn","expandByColumnOnly","expandHeaderColumnRenderer","_ref","isAnyExpands","expandColumnRenderer","_ref2","expanded","InvestorsTable","lib_default","keyField","bootstrap4","data","this","props","filterFactory","striped","bordered","hover","condensed","Component","createChartFormat","title","numRounder","options","labels","value","name","concat","legend","position","horizontalAlign","offsetX","itemMargin","vertical","margin","offsetY","floating","style","fontSize","color","series","Charts","_this$props$data","numOfinverstors","amountOfInvestment","investors","tokenEconomics","investments","react_apexcharts_min_default","type","statistics","App","src_Charts_0","src_InvestorsTable_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","vestingPeriodToWordTable","183","365","730","1095","2190","exports","pos","num","parts","parseFloat","toString","split","length","toFixed","replace","join"],"mappings":"kmCASIA,EAAQ,KAFVC,wBAIIC,GAAkBC,IAHtBA,kBAGuC,GACnCC,EAAe,SAACC,GAAD,OAAUC,EAAAC,EAAAC,cAAA,YAAON,EAAgBG,KAEhDI,EAAU,CACd,CACEC,UAAW,UACXC,KAAM,UACNC,MAAO,OACPC,OAAQC,uBACRC,cAAe,iBACfC,QAAS,kBAEX,CACEN,UAAW,uBACXC,KAAM,SACNI,cAAe,eACfC,QAAS,UAEX,CACEN,UAAW,gBACXC,KAAM,gBACNM,UAAWb,EACXc,MAAM,EACNH,cAAe,gBACfC,QAAS,UAEX,CACEN,UAAW,qBACXC,KAAM,aACNI,cAAe,eACfC,QAAS,UAEX,CACEN,UAAW,QACXC,KAAM,QACNM,UAAWb,EACXc,MAAM,EACNH,cAAe,gBACfC,QAAS,UAGX,CACEN,UAAW,uBACXC,KAAM,WACNM,UAAWb,EACXW,cAAe,gBACfI,QAAQ,GAEV,CACET,UAAW,uBACXC,KAAM,UACNM,UAAWb,EACXW,cAAe,gBACfI,QAAQ,GAEV,CACET,UAAW,uBACXC,KAAM,UACNM,UAAWb,EACXW,cAAe,gBACfI,QAAQ,GAEV,CACET,UAAW,wBACXC,KAAM,UACNM,UAAWb,EACXW,cAAe,gBACfI,QAAQ,IAINC,EAAY,CAChBC,SAAU,SAAAC,GACR,OACEhB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,UACbjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BAEDc,EAAIE,WAAWC,IAAI,SAAAC,GAClB,OACEpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YAAOP,EAAoByB,EAAIC,eAA/B,MACCvB,EAAasB,EAAIE,aAO9BC,kBAAkB,EAClBC,oBAAoB,EACpBC,2BAA4B,SAAAC,GAAA,OAAAA,EAAGC,aAAkC3B,EAAAC,EAAAC,cAAA,cAAWF,EAAAC,EAAAC,cAAA,eAC5E0B,qBAAsB,SAAAC,GAAA,OAAAA,EAAGC,SAA0B9B,EAAAC,EAAAC,cAAA,cAAWF,EAAAC,EAAAC,cAAA,kBAsBjD6B,mLAjBX,OACE/B,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,CACEgC,SAAS,KACTC,YAAY,EACZC,KAAOC,KAAKC,MAAMF,KAClBhC,QAAUA,EACVI,OAAS+B,MACTxB,UAAYA,EACZyB,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLC,WAAS,WAbYC,uCCnGzBjD,EAAQ,KAFVC,wBACAE,qBAaI+C,EAAoB,SAACT,EAAMU,GAC/B,IAAMC,EAAajD,EAAiB,GAEpC,MAAQ,CACNkD,QAAS,CACPC,OAAQb,EAAKhB,IAAI,SAAAC,GACf,IAAM6B,EAAQH,EAAW1B,EAAI6B,OACvBC,EAAOvD,EAAoByB,EAAIC,eACrC,SAAA8B,OAAUD,EAAV,MAAAC,OAAmBF,KAErBG,OAAQ,CACNC,SAAU,SACVC,gBAAiB,OACjBC,QAAS,GACTC,WAAY,CACVC,SAAU,KAGdZ,MAAO,CACLxC,KAAMwC,EACNvC,MAAO,SACPoD,OAAQ,GACRH,QAAS,EACTI,QAAS,EACTC,UAAU,EACVC,MAAO,CACJC,SAAU,OACVC,MAAQ,aAIfC,OAAQ7B,EAAKhB,IAAI,SAAAC,GAAG,OAAIA,EAAI6B,UA0CjBgB,mLA3BJ,IAAAC,EAKc9B,KAAKC,MAAMF,KAF9BgC,EAHKD,EAGLC,gBACAC,EAJKF,EAILE,mBAGIC,GAPCH,EAKLI,eAEgB1B,EAAkBuB,EAAiB,wBAC/CI,EAAc3B,EAAkBwB,EAAoB,wBAE1D,OACEpE,EAAAC,EAAAC,cAAA,OAAKe,UAAU,kBACbjB,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CACEgB,UAAU,WACV8B,QAASsB,EAAUtB,QACnBiB,OAAQK,EAAUL,OAClBS,KAAK,QACPzE,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CACEgB,UAAU,WACV8B,QAASwB,EAAYxB,QACrBiB,OAAQO,EAAYP,OACpBS,KAAK,gBAtBM9B,aC5Df0B,EAAY3E,EAAQ,IACpBgF,EAAahF,EAAQ,KAWZiF,MATf,WACE,OACE3E,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACbjB,EAAAC,EAAAC,cAAC0E,EAAD,CAAQzC,KAAMuC,IACd1E,EAAAC,EAAAC,cAAC2E,EAAD,CAAgB1C,KAAMkC,MCCRS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpF,EAAAC,EAAAC,cAACmF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iCEnInB,IAAMC,EAA2B,CAC/BC,IAAO,WACPC,IAAO,SACPC,IAAO,UACPC,KAAQ,UACRC,KAAQ,WAEVC,EAAQzG,oBAAuB,SAAA0B,GAAa,OAAIyE,EAAyBzE,IACzE+E,EAAQvG,iBAAmB,SAAAwG,GAAG,OAAI,SAAAC,GAChC,IAAIC,EAAQC,WAAWF,GAAKG,WAAWC,MAAM,KAI7C,OAHoB,GAAhBH,EAAMI,SAAaJ,EAAQC,WAAWF,GAAKM,QAAQP,GAAKK,MAAM,MAClEH,EAAM,GAAKA,EAAM,GAAGM,QAAQ,oBAAoB,OAC9BN,EAAMO,KAAK","file":"static/js/main.2e869cb9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport 'react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport './InvestorsTable.css';\nconst {\n  vestingPeriodToWord,\n  createNumRounder\n} = require('./utils');\n\nconst numRounderByTwo = createNumRounder(2);\nconst numFormatter = (cell) => <span>{numRounderByTwo(cell)}</span>;\n\nconst columns = [\n  {\n    dataField: 'address',\n    text: 'Address',\n    align: 'left',\n    filter: textFilter(),\n    headerClasses: 'address-header',\n    classes: 'address-column'\n  },\n  {\n    dataField: 'rank.byVestingPerDay',\n    text: 'V Rank',\n    headerClasses: 'rank-headers',\n    classes: 'column'\n  },\n  {\n    dataField: 'vestingPerDay',\n    text: 'Vesting / Day',\n    formatter: numFormatter,\n    sort: true,\n    headerClasses: 'token-headers',\n    classes: 'column'\n  },\n  {\n    dataField: 'rank.byTotalAmount',\n    text: 'Total Rank',\n    headerClasses: 'rank-headers',\n    classes: 'column'\n  },\n  {\n    dataField: 'total',\n    text: 'Total',\n    formatter: numFormatter,\n    sort: true,\n    headerClasses: 'token-headers',\n    classes: 'column'\n  },\n\n  {\n    dataField: 'investmentUnfold.183',\n    text: '6 Months',\n    formatter: numFormatter,\n    headerClasses: 'token-headers',\n    hidden: true\n  },\n  {\n    dataField: 'investmentUnfold.365',\n    text: '1 Years',\n    formatter: numFormatter,\n    headerClasses: 'token-headers',\n    hidden: true\n  },\n  {\n    dataField: 'investmentUnfold.730',\n    text: '2 Years',\n    formatter: numFormatter,\n    headerClasses: 'token-headers',\n    hidden: true\n  },\n  {\n    dataField: 'investmentUnfold.1095',\n    text: '3 Years',\n    formatter: numFormatter,\n    headerClasses: 'token-headers',\n    hidden: true\n  }\n];\n\nconst expandRow = {\n  renderer: row => {\n    return (\n      <div className=\"expand\">\n        <div>\n          <span>Vesting Detail</span>\n        </div>\n        {row.investment.map(inv => {\n          return (\n            <div>\n              <span>{vestingPeriodToWord[inv.vestingPeriod]}: </span>\n              {numFormatter(inv.amount)}\n            </div>\n          )\n        })}\n      </div>\n    )\n  },\n  showExpandColumn: true,\n  expandByColumnOnly: true,\n  expandHeaderColumnRenderer: ({ isAnyExpands }) => isAnyExpands ? <b>-</b> : <b>+</b>,\n  expandColumnRenderer: ({ expanded }) => expanded ? <b>-</b> : <b>...</b>\n};\n\nclass InvestorsTable extends Component {\n  render() {\n    return (\n      <BootstrapTable\n        keyField='id'\n        bootstrap4={true}\n        data={ this.props.data }\n        columns={ columns }\n        filter={ filterFactory() }\n        expandRow={ expandRow }\n        striped\n        bordered\n        hover\n        condensed\n      />\n    )\n  }\n}\n\nexport default InvestorsTable;\n","import React, { Component } from 'react';\nimport ApexCharts from \"react-apexcharts\";\nimport './Charts.css';\n\nconst {\n  vestingPeriodToWord,\n  createNumRounder\n} = require('./utils');\n\nconst colors = [\n  \"#589CBA\",\n  \"#FCD230\",\n  \"#85B665\",\n  \"#CA484B\",\n  \"#CB83AC\"\n]\n\n\n\nconst createChartFormat = (data, title) => {\n  const numRounder = createNumRounder(0);\n\n  return ({\n    options: {\n      labels: data.map(inv => {\n        const value = numRounder(inv.value);\n        const name = vestingPeriodToWord(inv.vestingPeriod);\n        return `${name}: ${value}`;\n      }),\n      legend: {\n        position: 'bottom',\n        horizontalAlign: 'left',\n        offsetX: 10,\n        itemMargin: {\n          vertical: 20,\n        }\n      },\n      title: {\n        text: title,\n        align: 'center',\n        margin: 10,\n        offsetX: 0,\n        offsetY: 0,\n        floating: false,\n        style: {\n           fontSize: '16px',\n           color:  '#263238'\n        }\n      }\n    },\n    series: data.map(inv => inv.value),\n  })\n\n\n  return data.map((inv, idx) => {\n    return ({\n      title: vestingPeriodToWord(inv.vestingPeriod) || inv.name,\n      value: inv.value,\n      color: colors[idx],\n      ratio: inv.ratio\n    })\n  })\n}\n\nclass Charts extends Component {\n  render() {\n\n    const {\n      numOfinverstors,\n      amountOfInvestment,\n      tokenEconomics } = this.props.data;\n\n    const investors = createChartFormat(numOfinverstors, 'Number of Investors')\n    const investments = createChartFormat(amountOfInvestment, 'Amount of Investment');\n\n    return (\n      <div className=\"chartContainer\">\n        <ApexCharts\n          className=\"piechart\"\n          options={investors.options}\n          series={investors.series}\n          type=\"pie\"/>\n        <ApexCharts\n          className=\"piechart\"\n          options={investments.options}\n          series={investments.series}\n          type=\"pie\"/>\n      </div>\n    )\n  }\n}\n\nexport default Charts;\n","import React from 'react';\nimport InvestorsTable from './InvestorsTable';\nimport Charts from './Charts';\n\nconst investors = require('./data/salesInfo.json'),\n      statistics = require('./data/statistics');\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Charts data={statistics}/>\n      <InvestorsTable data={investors}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const vestingPeriodToWordTable = {\n  '183': '6 Months',\n  '365': '1 Year',\n  '730': '2 Years',\n  '1095': '3 Years',\n  '2190': '6 Years'\n}\nexports.vestingPeriodToWord =  vestingPeriod => vestingPeriodToWordTable[vestingPeriod];\nexports.createNumRounder = pos => num => {\n  let parts = parseFloat(num).toString().split('.');\n  if (parts.length == 2) parts = parseFloat(num).toFixed(pos).split('.')\n  parts[0] = parts[0].replace(/(.)(?=(\\d{3})+$)/g,'$1,');\n  const formatted = parts.join('.');\n  return formatted;\n}\n"],"sourceRoot":""}